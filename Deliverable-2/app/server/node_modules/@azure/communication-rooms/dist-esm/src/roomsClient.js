// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { createCommunicationAuthPolicy, isKeyCredential, parseClientArguments, } from "@azure/communication-common";
import { logger } from "./logger";
import { tracingClient } from "./tracing";
import { RoomsApiClient } from "./generated/src";
import { mapCommunicationIdentifierToRoomParticipantRestModel, mapToRoomParticipantRestModel, mapToRoomParticipantSdkModel, mapToRoomSdkModel, } from "./models/mappers";
import { generateUuid } from "./models/uuid";
/**
 * @internal
 * Checks whether the type of a value is RoomsClientOptions or not.
 * @param options - The value being checked.
 */
const isRoomsClientOptions = (options) => !!options && !isKeyCredential(options);
/**
 * The Rooms service client.
 */
export class RoomsClient {
    constructor(connectionStringOrUrl, credentialOrOptions, maybeOptions = {}) {
        const { url, credential } = parseClientArguments(connectionStringOrUrl, credentialOrOptions);
        const options = isRoomsClientOptions(credentialOrOptions) ? credentialOrOptions : maybeOptions;
        const internalPipelineOptions = Object.assign(Object.assign({}, options), {
            loggingOptions: {
                logger: logger.info,
            },
        });
        this.client = new RoomsApiClient(url, Object.assign({ endpoint: url }, internalPipelineOptions));
        const authPolicy = createCommunicationAuthPolicy(credential);
        this.client.pipeline.addPolicy(authPolicy);
    }
    /**
     * Creates a new room asynchronously.
     * @param request - Request for creating a room.
     * @param options - Operation options.
     * @returns a RoomModel object with the values of the created room.
     */
    async createRoom(options = {}) {
        const repeatabilityRequestId = generateUuid();
        const repeatabilityFirstSent = new Date();
        return tracingClient.withSpan("RoomsClient-CreateRoom", options, async (updatedOptions) => {
            var _a;
            const result = await this.client.rooms.createRoom(Object.assign(Object.assign({}, options), { participants: (_a = options.participants) === null || _a === void 0 ? void 0 : _a.map((participant) => mapToRoomParticipantRestModel(participant)) }), Object.assign(Object.assign({}, updatedOptions), { repeatabilityFirstSent: repeatabilityFirstSent, repeatabilityRequestID: repeatabilityRequestId }));
            return mapToRoomSdkModel(result);
        });
    }
    /**
     * Updates a room asynchronously.
     * @param roomId - ID of the room.
     * @param request - Request for updating a room.
     * @param options - Operational options.
     * @returns a RoomModel object with the values of the created room.
     */
    async updateRoom(roomId, options = {}) {
        return tracingClient.withSpan("RoomsClient-UpdateRoom", options, async (updatedOptions) => {
            var _a;
            const result = await this.client.rooms.updateRoom(roomId, Object.assign({ patchRoomRequest: Object.assign(Object.assign({}, options), { participants: (_a = options.participants) === null || _a === void 0 ? void 0 : _a.map((participant) => mapToRoomParticipantRestModel(participant)) }) }, updatedOptions));
            return mapToRoomSdkModel(result);
        });
    }
    /**
     * Gets a room by id asynchronously.
     * @param roomId - ID of the room.
     * @param options - Operational options.
     * @returns a RoomModel object with the values of the created room.
     */
    async getRoom(roomId, options = {}) {
        return tracingClient.withSpan("RoomsClient-GetRoom", options, async (updatedOptions) => {
            return mapToRoomSdkModel(await this.client.rooms.getRoom(roomId, updatedOptions));
        });
    }
    /**
     * Deletes a room by id asynchronously.
     * @param roomId - ID of the room.
     * @param options - Operational options.
     */
    async deleteRoom(roomId, options = {}) {
        return tracingClient.withSpan("RoomsClient-DeleteRoom", options, async (updatedOptions) => {
            await this.client.rooms.deleteRoom(roomId, updatedOptions);
        });
    }
    /**
     * Gets the participants of a room asynchronously.
     * @param roomId - ID of the room.
     * @param options - Operational options.
     * @returns a list of all the participants in the room.
     */
    async getParticipants(roomId, options = {}) {
        return tracingClient.withSpan("RoomsClient-GetParticipants", options, async (updatedOptions) => {
            const result = await this.client.rooms.getParticipants(roomId, updatedOptions);
            return result.participants.map((participant) => mapToRoomParticipantSdkModel(participant));
        });
    }
    /**
     * Adds Participants to a room asynchronously
     * @param roomId - ID of the room.
     * @param request - Request for adding participants to a room.
     * @param options - Operational options.
     * @returns a list of all the participants in the room.
     */
    async addParticipants(roomId, participants, options = {}) {
        return tracingClient.withSpan("RoomsClient-AddParticipants", options, async (updatedOptions) => {
            await this.client.rooms.addParticipants(roomId, {
                participants: participants.map((participant) => mapToRoomParticipantRestModel(participant)),
            }, updatedOptions);
        });
    }
    /**
     * Updates the Participants in a Room asynchronously.
     * @param roomId - ID of the room.
     * @param request - Request for updating participants in a room.
     * @param options - Operational options.
     * @returns a list of all the participants in the room.
     */
    async updateParticipants(roomId, participants, options = {}) {
        return tracingClient.withSpan("RoomsClient-UpdateParticipants", options, async (updatedOptions) => {
            await this.client.rooms.updateParticipants(roomId, {
                participants: participants.map((participant) => mapToRoomParticipantRestModel(participant)),
            }, updatedOptions);
        });
    }
    /**
     * Removes Participants from a Room asynchronously.
     * @param roomId - ID of the room.
     * @param request - Request for deleting participants in a room.
     * @param options - Operational options.
     * @returns a list of all the participants in the room.
     */
    async removeParticipants(roomId, participants, options = {}) {
        return tracingClient.withSpan("RoomsClient-RemoveParticipants", options, async (updatedOptions) => {
            await this.client.rooms.removeParticipants(roomId, {
                participants: participants.map((participant) => mapCommunicationIdentifierToRoomParticipantRestModel(participant)),
            }, updatedOptions);
        });
    }
}
//# sourceMappingURL=roomsClient.js.map