{"version":3,"file":"mappers.js","sourceRoot":"","sources":["../../../src/models/mappers.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAQlC,OAAO,EACL,kCAAkC,EAClC,iBAAiB,EACjB,gCAAgC,GACjC,MAAM,6BAA6B,CAAC;AAErC;;;GAGG;AACH,MAAM,CAAC,MAAM,6BAA6B,GAAG,CAC3C,eAAgC,EACL,EAAE;IAC7B,MAAM,EAAE,EAAE,KAAc,eAAe,EAAxB,IAAI,UAAK,eAAe,EAAjC,MAAe,CAAkB,CAAC;IACxC,IAAI,iBAAiB,CAAC,EAAE,CAAC,CAAC,IAAI,KAAK,mBAAmB,EAAE;QACtD,cAAc,CAAC,8CAA8C,CAAC,CAAC;KAChE;IACD,uBACE,uBAAuB,EAAE,gCAAgC,CAAC,EAAE,CAAC,IAC1D,IAAI,EACP;AACJ,CAAC,CAAC;AAEF;;GAEG;AACH,MAAM,CAAC,MAAM,oDAAoD,GAAG,CAClE,uBAAoD,EACzB,EAAE;IAC7B,OAAO;QACL,uBAAuB,EAAE,gCAAgC,CAAC,uBAAuB,CAAC;KACnF,CAAC;AACJ,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAC1C,eAA0C,EACzB,EAAE;IACnB,MAAM,EAAE,uBAAuB,KAAc,eAAe,EAAxB,IAAI,UAAK,eAAe,EAAtD,2BAAoC,CAAkB,CAAC;IAC7D,uBACE,EAAE,EAAE,kCAAkC,CACpC,uBAA4D,CAC7D,IACE,IAAI,EACP;AACJ,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,MAA2B,EAAQ,EAAE;IACrE,MAAM,EAAE,EAAE,EAAE,eAAe,EAAE,YAAY,EAAE,cAAc,KAAc,MAAM,EAAf,IAAI,UAAK,MAAM,EAAvE,2DAA8D,CAAS,CAAC;IAC9E,uBACE,EAAE,EAAE,EAAE,aAAF,EAAE,cAAF,EAAE,GAAI,cAAc,CAAC,yBAAyB,CAAC,EACnD,SAAS,EAAE,eAAe,EAC1B,YAAY,EAAE,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,4BAA4B,CAAC,WAAW,CAAC,CAAC,EAC3F,UAAU,EAAE,cAAc,IACvB,IAAI,EACP;AACJ,CAAC,CAAC;AAEF,SAAS,cAAc,CAAC,YAAoB;IAC1C,MAAM,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC;AAChC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as RestModel from \"../generated/src/models\";\nimport { Room, RoomParticipant } from \"./models\";\nimport {\n  CommunicationUserIdentifier,\n  SerializedCommunicationIdentifier,\n} from \"@azure/communication-common\";\nimport {\n  deserializeCommunicationIdentifier,\n  getIdentifierKind,\n  serializeCommunicationIdentifier,\n} from \"@azure/communication-common\";\n\n/**\n * @internal\n * Mapping room participant customer model to room participant REST model.\n */\nexport const mapToRoomParticipantRestModel = (\n  roomParticipant: RoomParticipant\n): RestModel.RoomParticipant => {\n  const { id, ...rest } = roomParticipant;\n  if (getIdentifierKind(id).kind !== \"communicationUser\") {\n    throwException(\"We currently only support CommunicationUsers\");\n  }\n  return {\n    communicationIdentifier: serializeCommunicationIdentifier(id),\n    ...rest,\n  };\n};\n\n/**\n * Mapping CommunicationUserIdentifier to room participant REST model.\n */\nexport const mapCommunicationIdentifierToRoomParticipantRestModel = (\n  communicationIdentifier: CommunicationUserIdentifier\n): RestModel.RoomParticipant => {\n  return {\n    communicationIdentifier: serializeCommunicationIdentifier(communicationIdentifier),\n  };\n};\n\n/**\n * @internal\n * Mapping room participant REST model to room participant SDK model.\n */\nexport const mapToRoomParticipantSdkModel = (\n  roomParticipant: RestModel.RoomParticipant\n): RoomParticipant => {\n  const { communicationIdentifier, ...rest } = roomParticipant;\n  return {\n    id: deserializeCommunicationIdentifier(\n      communicationIdentifier as SerializedCommunicationIdentifier\n    ),\n    ...rest,\n  };\n};\n\n/**\n * @internal\n * Mapping room REST model to room SDK model.\n */\nexport const mapToRoomSdkModel = (result: RestModel.RoomModel): Room => {\n  const { id, createdDateTime, participants, roomJoinPolicy, ...rest } = result;\n  return {\n    id: id ?? throwException(\"Room ID cannot be null.\"),\n    createdOn: createdDateTime,\n    participants: participants?.map((participant) => mapToRoomParticipantSdkModel(participant)),\n    joinPolicy: roomJoinPolicy,\n    ...rest,\n  };\n};\n\nfunction throwException(errorMessage: string): never {\n  throw new Error(errorMessage);\n}\n"]}