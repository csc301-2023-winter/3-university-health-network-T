// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { __rest } from "tslib";
import { deserializeCommunicationIdentifier, getIdentifierKind, serializeCommunicationIdentifier, } from "@azure/communication-common";
/**
 * @internal
 * Mapping room participant customer model to room participant REST model.
 */
export const mapToRoomParticipantRestModel = (roomParticipant) => {
    const { id } = roomParticipant, rest = __rest(roomParticipant, ["id"]);
    if (getIdentifierKind(id).kind !== "communicationUser") {
        throwException("We currently only support CommunicationUsers");
    }
    return Object.assign({ communicationIdentifier: serializeCommunicationIdentifier(id) }, rest);
};
/**
 * Mapping CommunicationUserIdentifier to room participant REST model.
 */
export const mapCommunicationIdentifierToRoomParticipantRestModel = (communicationIdentifier) => {
    return {
        communicationIdentifier: serializeCommunicationIdentifier(communicationIdentifier),
    };
};
/**
 * @internal
 * Mapping room participant REST model to room participant SDK model.
 */
export const mapToRoomParticipantSdkModel = (roomParticipant) => {
    const { communicationIdentifier } = roomParticipant, rest = __rest(roomParticipant, ["communicationIdentifier"]);
    return Object.assign({ id: deserializeCommunicationIdentifier(communicationIdentifier) }, rest);
};
/**
 * @internal
 * Mapping room REST model to room SDK model.
 */
export const mapToRoomSdkModel = (result) => {
    const { id, createdDateTime, participants, roomJoinPolicy } = result, rest = __rest(result, ["id", "createdDateTime", "participants", "roomJoinPolicy"]);
    return Object.assign({ id: id !== null && id !== void 0 ? id : throwException("Room ID cannot be null."), createdOn: createdDateTime, participants: participants === null || participants === void 0 ? void 0 : participants.map((participant) => mapToRoomParticipantSdkModel(participant)), joinPolicy: roomJoinPolicy }, rest);
};
function throwException(errorMessage) {
    throw new Error(errorMessage);
}
//# sourceMappingURL=mappers.js.map