{"version":3,"file":"roomsClient.js","sourceRoot":"","sources":["../../src/roomsClient.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC,OAAO,EAEL,6BAA6B,EAC7B,eAAe,EACf,oBAAoB,GACrB,MAAM,6BAA6B,CAAC;AAErC,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,OAAO,EAAE,aAAa,EAAE,MAAM,WAAW,CAAC;AAC1C,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AACjD,OAAO,EACL,oDAAoD,EACpD,6BAA6B,EAC7B,4BAA4B,EAC5B,iBAAiB,GAClB,MAAM,kBAAkB,CAAC;AAa1B,OAAO,EAAE,YAAY,EAAE,MAAM,eAAe,CAAC;AAE7C;;;;GAIG;AACH,MAAM,oBAAoB,GAAG,CAAC,OAAY,EAAiC,EAAE,CAC3E,CAAC,CAAC,OAAO,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;AAEzC;;GAEG;AACH,MAAM,OAAO,WAAW;IA0BtB,YACE,qBAA6B,EAC7B,mBAA0E,EAC1E,eAAmC,EAAE;QAErC,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,GAAG,oBAAoB,CAAC,qBAAqB,EAAE,mBAAmB,CAAC,CAAC;QAC7F,MAAM,OAAO,GAAG,oBAAoB,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,YAAY,CAAC;QAE/F,MAAM,uBAAuB,mCACxB,OAAO,GACP;YACD,cAAc,EAAE;gBACd,MAAM,EAAE,MAAM,CAAC,IAAI;aACpB;SACF,CACF,CAAC;QAEF,IAAI,CAAC,MAAM,GAAG,IAAI,cAAc,CAAC,GAAG,kBAAI,QAAQ,EAAE,GAAG,IAAK,uBAAuB,EAAG,CAAC;QAErF,MAAM,UAAU,GAAG,6BAA6B,CAAC,UAAU,CAAC,CAAC;QAE7D,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAC7C,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,UAAU,CAAC,UAA6B,EAAE;QACrD,MAAM,sBAAsB,GAAG,YAAY,EAAE,CAAC;QAC9C,MAAM,sBAAsB,GAAG,IAAI,IAAI,EAAE,CAAC;QAC1C,OAAO,aAAa,CAAC,QAAQ,CAAC,wBAAwB,EAAE,OAAO,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE;;YACxF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,iCAE1C,OAAO,KACV,YAAY,EAAE,MAAA,OAAO,CAAC,YAAY,0CAAE,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CACtD,6BAA6B,CAAC,WAAW,CAAC,CAC3C,qCAGE,cAAc,KACjB,sBAAsB,EAAE,sBAAsB,EAC9C,sBAAsB,EAAE,sBAAsB,IAEjD,CAAC;YACF,OAAO,iBAAiB,CAAC,MAAM,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;;OAMG;IACI,KAAK,CAAC,UAAU,CAAC,MAAc,EAAE,UAA6B,EAAE;QACrE,OAAO,aAAa,CAAC,QAAQ,CAAC,wBAAwB,EAAE,OAAO,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE;;YACxF,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,kBACtD,gBAAgB,kCACX,OAAO,KACV,YAAY,EAAE,MAAA,OAAO,CAAC,YAAY,0CAAE,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CACtD,6BAA6B,CAAC,WAAW,CAAC,CAC3C,OAEA,cAAc,EACjB,CAAC;YACH,OAAO,iBAAiB,CAAC,MAAM,CAAC,CAAC;QACnC,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,OAAO,CAAC,MAAc,EAAE,UAA0B,EAAE;QAC/D,OAAO,aAAa,CAAC,QAAQ,CAAC,qBAAqB,EAAE,OAAO,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE;YACrF,OAAO,iBAAiB,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC,CAAC;QACpF,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAC,UAAU,CAAC,MAAc,EAAE,UAA6B,EAAE;QACrE,OAAO,aAAa,CAAC,QAAQ,CAAC,wBAAwB,EAAE,OAAO,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE;YACxF,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;QAC7D,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;;OAKG;IACI,KAAK,CAAC,eAAe,CAC1B,MAAc,EACd,UAAkC,EAAE;QAEpC,OAAO,aAAa,CAAC,QAAQ,CAC3B,6BAA6B,EAC7B,OAAO,EACP,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;YAC/E,OAAO,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,4BAA4B,CAAC,WAAW,CAAC,CAAC,CAAC;QAC7F,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACI,KAAK,CAAC,eAAe,CAC1B,MAAc,EACd,YAA+B,EAC/B,UAAkC,EAAE;QAEpC,OAAO,aAAa,CAAC,QAAQ,CAC3B,6BAA6B,EAC7B,OAAO,EACP,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,CACrC,MAAM,EACN;gBACE,YAAY,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CAC7C,6BAA6B,CAAC,WAAW,CAAC,CAC3C;aACF,EACD,cAAc,CACf,CAAC;QACJ,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACI,KAAK,CAAC,kBAAkB,CAC7B,MAAc,EACd,YAA+B,EAC/B,UAAqC,EAAE;QAEvC,OAAO,aAAa,CAAC,QAAQ,CAC3B,gCAAgC,EAChC,OAAO,EACP,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,kBAAkB,CACxC,MAAM,EACN;gBACE,YAAY,EAAE,YAAY,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CAC7C,6BAA6B,CAAC,WAAW,CAAC,CAC3C;aACF,EACD,cAAc,CACf,CAAC;QACJ,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACI,KAAK,CAAC,kBAAkB,CAC7B,MAAc,EACd,YAA2C,EAC3C,UAAqC,EAAE;QAEvC,OAAO,aAAa,CAAC,QAAQ,CAC3B,gCAAgC,EAChC,OAAO,EACP,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,kBAAkB,CACxC,MAAM,EACN;gBACE,YAAY,EAAE,YAAa,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE,CAC9C,oDAAoD,CAAC,WAAW,CAAC,CAClE;aACF,EACD,cAAc,CACf,CAAC;QACJ,CAAC,CACF,CAAC;IACJ,CAAC;CACF","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { InternalClientPipelineOptions } from \"@azure/core-client\";\nimport { KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport {\n  CommunicationUserIdentifier,\n  createCommunicationAuthPolicy,\n  isKeyCredential,\n  parseClientArguments,\n} from \"@azure/communication-common\";\n\nimport { logger } from \"./logger\";\nimport { tracingClient } from \"./tracing\";\nimport { RoomsApiClient } from \"./generated/src\";\nimport {\n  mapCommunicationIdentifierToRoomParticipantRestModel,\n  mapToRoomParticipantRestModel,\n  mapToRoomParticipantSdkModel,\n  mapToRoomSdkModel,\n} from \"./models/mappers\";\nimport { Room, RoomParticipant } from \"./models/models\";\nimport {\n  AddParticipantsOptions,\n  CreateRoomOptions,\n  DeleteRoomOptions,\n  GetParticipantsOptions,\n  GetRoomOptions,\n  RemoveParticipantsOptions,\n  RoomsClientOptions,\n  UpdateParticipantsOptions,\n  UpdateRoomOptions,\n} from \"./models/options\";\nimport { generateUuid } from \"./models/uuid\";\n\n/**\n * @internal\n * Checks whether the type of a value is RoomsClientOptions or not.\n * @param options - The value being checked.\n */\nconst isRoomsClientOptions = (options: any): options is RoomsClientOptions =>\n  !!options && !isKeyCredential(options);\n\n/**\n * The Rooms service client.\n */\nexport class RoomsClient {\n  private readonly client: RoomsApiClient;\n\n  /**\n   * Initializes a new instance of the RoomsClient class.\n   * @param connectionString - Connection string to connect to an Azure Communication Service resource.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(connectionString: string, options?: RoomsClientOptions);\n\n  /**\n   * Initializes a new instance of the RoomsClient using an Azure KeyCredential\n   * @param endpoint - The url of the Communication Services resource\n   * @param credential - An object that is used to authenticate requests to the service. Use the Azure KeyCredential or `@azure/identity` to create a credential.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(endpoint: string, credential: KeyCredential, options?: RoomsClientOptions);\n\n  /**\n   * Initializes a new instance of the RoomsClient using a TokenCredential\n   * @param endpoint - The url of the Communication Services resource\n   * @param credential - An object that is used to authenticate requests to the service. Use the AzureCommunicationTokenCredential from `@azure/communication-common` to create a credential.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(endpoint: string, credential: TokenCredential, options?: RoomsClientOptions);\n\n  constructor(\n    connectionStringOrUrl: string,\n    credentialOrOptions?: RoomsClientOptions | KeyCredential | TokenCredential,\n    maybeOptions: RoomsClientOptions = {}\n  ) {\n    const { url, credential } = parseClientArguments(connectionStringOrUrl, credentialOrOptions);\n    const options = isRoomsClientOptions(credentialOrOptions) ? credentialOrOptions : maybeOptions;\n\n    const internalPipelineOptions: InternalClientPipelineOptions = {\n      ...options,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n        },\n      },\n    };\n\n    this.client = new RoomsApiClient(url, { endpoint: url, ...internalPipelineOptions });\n\n    const authPolicy = createCommunicationAuthPolicy(credential);\n\n    this.client.pipeline.addPolicy(authPolicy);\n  }\n\n  /**\n   * Creates a new room asynchronously.\n   * @param request - Request for creating a room.\n   * @param options - Operation options.\n   * @returns a RoomModel object with the values of the created room.\n   */\n  public async createRoom(options: CreateRoomOptions = {}): Promise<Room> {\n    const repeatabilityRequestId = generateUuid();\n    const repeatabilityFirstSent = new Date();\n    return tracingClient.withSpan(\"RoomsClient-CreateRoom\", options, async (updatedOptions) => {\n      const result = await this.client.rooms.createRoom(\n        {\n          ...options,\n          participants: options.participants?.map((participant) =>\n            mapToRoomParticipantRestModel(participant)\n          ),\n        },\n        {\n          ...updatedOptions,\n          repeatabilityFirstSent: repeatabilityFirstSent,\n          repeatabilityRequestID: repeatabilityRequestId,\n        }\n      );\n      return mapToRoomSdkModel(result);\n    });\n  }\n\n  /**\n   * Updates a room asynchronously.\n   * @param roomId - ID of the room.\n   * @param request - Request for updating a room.\n   * @param options - Operational options.\n   * @returns a RoomModel object with the values of the created room.\n   */\n  public async updateRoom(roomId: string, options: UpdateRoomOptions = {}): Promise<Room> {\n    return tracingClient.withSpan(\"RoomsClient-UpdateRoom\", options, async (updatedOptions) => {\n      const result = await this.client.rooms.updateRoom(roomId, {\n        patchRoomRequest: {\n          ...options,\n          participants: options.participants?.map((participant) =>\n            mapToRoomParticipantRestModel(participant)\n          ),\n        },\n        ...updatedOptions,\n      });\n      return mapToRoomSdkModel(result);\n    });\n  }\n\n  /**\n   * Gets a room by id asynchronously.\n   * @param roomId - ID of the room.\n   * @param options - Operational options.\n   * @returns a RoomModel object with the values of the created room.\n   */\n  public async getRoom(roomId: string, options: GetRoomOptions = {}): Promise<Room> {\n    return tracingClient.withSpan(\"RoomsClient-GetRoom\", options, async (updatedOptions) => {\n      return mapToRoomSdkModel(await this.client.rooms.getRoom(roomId, updatedOptions));\n    });\n  }\n\n  /**\n   * Deletes a room by id asynchronously.\n   * @param roomId - ID of the room.\n   * @param options - Operational options.\n   */\n  public async deleteRoom(roomId: string, options: DeleteRoomOptions = {}): Promise<void> {\n    return tracingClient.withSpan(\"RoomsClient-DeleteRoom\", options, async (updatedOptions) => {\n      await this.client.rooms.deleteRoom(roomId, updatedOptions);\n    });\n  }\n\n  /**\n   * Gets the participants of a room asynchronously.\n   * @param roomId - ID of the room.\n   * @param options - Operational options.\n   * @returns a list of all the participants in the room.\n   */\n  public async getParticipants(\n    roomId: string,\n    options: GetParticipantsOptions = {}\n  ): Promise<RoomParticipant[]> {\n    return tracingClient.withSpan(\n      \"RoomsClient-GetParticipants\",\n      options,\n      async (updatedOptions) => {\n        const result = await this.client.rooms.getParticipants(roomId, updatedOptions);\n        return result.participants.map((participant) => mapToRoomParticipantSdkModel(participant));\n      }\n    );\n  }\n\n  /**\n   * Adds Participants to a room asynchronously\n   * @param roomId - ID of the room.\n   * @param request - Request for adding participants to a room.\n   * @param options - Operational options.\n   * @returns a list of all the participants in the room.\n   */\n  public async addParticipants(\n    roomId: string,\n    participants: RoomParticipant[],\n    options: AddParticipantsOptions = {}\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"RoomsClient-AddParticipants\",\n      options,\n      async (updatedOptions) => {\n        await this.client.rooms.addParticipants(\n          roomId,\n          {\n            participants: participants.map((participant) =>\n              mapToRoomParticipantRestModel(participant)\n            ),\n          },\n          updatedOptions\n        );\n      }\n    );\n  }\n\n  /**\n   * Updates the Participants in a Room asynchronously.\n   * @param roomId - ID of the room.\n   * @param request - Request for updating participants in a room.\n   * @param options - Operational options.\n   * @returns a list of all the participants in the room.\n   */\n  public async updateParticipants(\n    roomId: string,\n    participants: RoomParticipant[],\n    options: UpdateParticipantsOptions = {}\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"RoomsClient-UpdateParticipants\",\n      options,\n      async (updatedOptions) => {\n        await this.client.rooms.updateParticipants(\n          roomId,\n          {\n            participants: participants.map((participant) =>\n              mapToRoomParticipantRestModel(participant)\n            ),\n          },\n          updatedOptions\n        );\n      }\n    );\n  }\n\n  /**\n   * Removes Participants from a Room asynchronously.\n   * @param roomId - ID of the room.\n   * @param request - Request for deleting participants in a room.\n   * @param options - Operational options.\n   * @returns a list of all the participants in the room.\n   */\n  public async removeParticipants(\n    roomId: string,\n    participants: CommunicationUserIdentifier[],\n    options: RemoveParticipantsOptions = {}\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"RoomsClient-RemoveParticipants\",\n      options,\n      async (updatedOptions) => {\n        await this.client.rooms.removeParticipants(\n          roomId,\n          {\n            participants: participants!.map((participant) =>\n              mapCommunicationIdentifierToRoomParticipantRestModel(participant)\n            ),\n          },\n          updatedOptions\n        );\n      }\n    );\n  }\n}\n"]}