'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var communicationCommon = require('@azure/communication-common');
var logger$1 = require('@azure/logger');
var coreTracing = require('@azure/core-tracing');
var tslib = require('tslib');
var uuid = require('uuid');
var coreClient = require('@azure/core-client');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var coreClient__namespace = /*#__PURE__*/_interopNamespace(coreClient);

// Copyright (c) Microsoft Corporation.
/**
 * The \@azure/logger configuration for this package.
 */
const logger = logger$1.createClientLogger("communication-rooms");

// Copyright (c) Microsoft Corporation.
/**
 * Creates a span using the global tracer.
 * @internal
 */
const tracingClient = coreTracing.createTracingClient({
    packageName: "Azure.Communication",
    namespace: "Microsoft.Communication",
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const CreateRoomRequest = {
    type: {
        name: "Composite",
        className: "CreateRoomRequest",
        modelProperties: {
            validFrom: {
                serializedName: "validFrom",
                type: {
                    name: "DateTime"
                }
            },
            validUntil: {
                serializedName: "validUntil",
                type: {
                    name: "DateTime"
                }
            },
            roomJoinPolicy: {
                serializedName: "roomJoinPolicy",
                type: {
                    name: "Enum",
                    allowedValues: ["InviteOnly", "CommunicationServiceUsers"]
                }
            },
            participants: {
                serializedName: "participants",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RoomParticipant"
                        }
                    }
                }
            }
        }
    }
};
const RoomParticipant = {
    type: {
        name: "Composite",
        className: "RoomParticipant",
        modelProperties: {
            communicationIdentifier: {
                serializedName: "communicationIdentifier",
                type: {
                    name: "Composite",
                    className: "CommunicationIdentifierModel"
                }
            },
            role: {
                serializedName: "role",
                type: {
                    name: "Enum",
                    allowedValues: ["Presenter", "Attendee", "Consumer"]
                }
            }
        }
    }
};
const CommunicationIdentifierModel = {
    type: {
        name: "Composite",
        className: "CommunicationIdentifierModel",
        modelProperties: {
            rawId: {
                serializedName: "rawId",
                type: {
                    name: "String"
                }
            },
            communicationUser: {
                serializedName: "communicationUser",
                type: {
                    name: "Composite",
                    className: "CommunicationUserIdentifierModel"
                }
            }
        }
    }
};
const CommunicationUserIdentifierModel = {
    type: {
        name: "Composite",
        className: "CommunicationUserIdentifierModel",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RoomModel = {
    type: {
        name: "Composite",
        className: "RoomModel",
        modelProperties: {
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String"
                }
            },
            createdDateTime: {
                serializedName: "createdDateTime",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            validFrom: {
                serializedName: "validFrom",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            validUntil: {
                serializedName: "validUntil",
                required: true,
                type: {
                    name: "DateTime"
                }
            },
            roomJoinPolicy: {
                serializedName: "roomJoinPolicy",
                required: true,
                type: {
                    name: "Enum",
                    allowedValues: ["InviteOnly", "CommunicationServiceUsers"]
                }
            },
            participants: {
                serializedName: "participants",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RoomParticipant"
                        }
                    }
                }
            }
        }
    }
};
const CommunicationErrorResponse = {
    type: {
        name: "Composite",
        className: "CommunicationErrorResponse",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "CommunicationError"
                }
            }
        }
    }
};
const CommunicationError = {
    type: {
        name: "Composite",
        className: "CommunicationError",
        modelProperties: {
            code: {
                serializedName: "code",
                required: true,
                type: {
                    name: "String"
                }
            },
            message: {
                serializedName: "message",
                required: true,
                type: {
                    name: "String"
                }
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String"
                }
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CommunicationError"
                        }
                    }
                }
            },
            innerError: {
                serializedName: "innererror",
                type: {
                    name: "Composite",
                    className: "CommunicationError"
                }
            }
        }
    }
};
const UpdateRoomRequest = {
    type: {
        name: "Composite",
        className: "UpdateRoomRequest",
        modelProperties: {
            validFrom: {
                serializedName: "validFrom",
                type: {
                    name: "DateTime"
                }
            },
            validUntil: {
                serializedName: "validUntil",
                type: {
                    name: "DateTime"
                }
            },
            roomJoinPolicy: {
                serializedName: "roomJoinPolicy",
                type: {
                    name: "Enum",
                    allowedValues: ["InviteOnly", "CommunicationServiceUsers"]
                }
            },
            participants: {
                serializedName: "participants",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RoomParticipant"
                        }
                    }
                }
            }
        }
    }
};
const ParticipantsCollection = {
    type: {
        name: "Composite",
        className: "ParticipantsCollection",
        modelProperties: {
            participants: {
                serializedName: "participants",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RoomParticipant"
                        }
                    }
                }
            }
        }
    }
};
const AddParticipantsRequest = {
    type: {
        name: "Composite",
        className: "AddParticipantsRequest",
        modelProperties: {
            participants: {
                serializedName: "participants",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RoomParticipant"
                        }
                    }
                }
            }
        }
    }
};
const UpdateParticipantsRequest = {
    type: {
        name: "Composite",
        className: "UpdateParticipantsRequest",
        modelProperties: {
            participants: {
                serializedName: "participants",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RoomParticipant"
                        }
                    }
                }
            }
        }
    }
};
const RemoveParticipantsRequest = {
    type: {
        name: "Composite",
        className: "RemoveParticipantsRequest",
        modelProperties: {
            participants: {
                serializedName: "participants",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RoomParticipant"
                        }
                    }
                }
            }
        }
    }
};
const RoomsCreateRoomExceptionHeaders = {
    type: {
        name: "Composite",
        className: "RoomsCreateRoomExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RoomsGetRoomExceptionHeaders = {
    type: {
        name: "Composite",
        className: "RoomsGetRoomExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RoomsUpdateRoomExceptionHeaders = {
    type: {
        name: "Composite",
        className: "RoomsUpdateRoomExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RoomsDeleteRoomExceptionHeaders = {
    type: {
        name: "Composite",
        className: "RoomsDeleteRoomExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RoomsGetParticipantsExceptionHeaders = {
    type: {
        name: "Composite",
        className: "RoomsGetParticipantsExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RoomsAddParticipantsExceptionHeaders = {
    type: {
        name: "Composite",
        className: "RoomsAddParticipantsExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RoomsUpdateParticipantsExceptionHeaders = {
    type: {
        name: "Composite",
        className: "RoomsUpdateParticipantsExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};
const RoomsRemoveParticipantsExceptionHeaders = {
    type: {
        name: "Composite",
        className: "RoomsRemoveParticipantsExceptionHeaders",
        modelProperties: {
            errorCode: {
                serializedName: "x-ms-error-code",
                type: {
                    name: "String"
                }
            }
        }
    }
};

var Mappers = /*#__PURE__*/Object.freeze({
    __proto__: null,
    CreateRoomRequest: CreateRoomRequest,
    RoomParticipant: RoomParticipant,
    CommunicationIdentifierModel: CommunicationIdentifierModel,
    CommunicationUserIdentifierModel: CommunicationUserIdentifierModel,
    RoomModel: RoomModel,
    CommunicationErrorResponse: CommunicationErrorResponse,
    CommunicationError: CommunicationError,
    UpdateRoomRequest: UpdateRoomRequest,
    ParticipantsCollection: ParticipantsCollection,
    AddParticipantsRequest: AddParticipantsRequest,
    UpdateParticipantsRequest: UpdateParticipantsRequest,
    RemoveParticipantsRequest: RemoveParticipantsRequest,
    RoomsCreateRoomExceptionHeaders: RoomsCreateRoomExceptionHeaders,
    RoomsGetRoomExceptionHeaders: RoomsGetRoomExceptionHeaders,
    RoomsUpdateRoomExceptionHeaders: RoomsUpdateRoomExceptionHeaders,
    RoomsDeleteRoomExceptionHeaders: RoomsDeleteRoomExceptionHeaders,
    RoomsGetParticipantsExceptionHeaders: RoomsGetParticipantsExceptionHeaders,
    RoomsAddParticipantsExceptionHeaders: RoomsAddParticipantsExceptionHeaders,
    RoomsUpdateParticipantsExceptionHeaders: RoomsUpdateParticipantsExceptionHeaders,
    RoomsRemoveParticipantsExceptionHeaders: RoomsRemoveParticipantsExceptionHeaders
});

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String"
        }
    }
};
const createRoomRequest = {
    parameterPath: "createRoomRequest",
    mapper: CreateRoomRequest
};
const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String"
        }
    }
};
const endpoint = {
    parameterPath: "endpoint",
    mapper: {
        serializedName: "endpoint",
        required: true,
        type: {
            name: "String"
        }
    },
    skipEncoding: true
};
const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-02-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String"
        }
    }
};
const repeatabilityRequestID = {
    parameterPath: ["options", "repeatabilityRequestID"],
    mapper: {
        serializedName: "Repeatability-Request-ID",
        type: {
            name: "Uuid"
        }
    }
};
const repeatabilityFirstSent = {
    parameterPath: ["options", "repeatabilityFirstSent"],
    mapper: {
        serializedName: "Repeatability-First-Sent",
        type: {
            name: "DateTime"
        }
    }
};
const roomId = {
    parameterPath: "roomId",
    mapper: {
        serializedName: "roomId",
        required: true,
        type: {
            name: "String"
        }
    }
};
const patchRoomRequest = {
    parameterPath: ["options", "patchRoomRequest"],
    mapper: UpdateRoomRequest
};
const addParticipantsRequest = {
    parameterPath: "addParticipantsRequest",
    mapper: AddParticipantsRequest
};
const updateParticipantsRequest = {
    parameterPath: "updateParticipantsRequest",
    mapper: UpdateParticipantsRequest
};
const removeParticipantsRequest = {
    parameterPath: "removeParticipantsRequest",
    mapper: RemoveParticipantsRequest
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
/** Class containing Rooms operations. */
class RoomsImpl {
    /**
     * Initialize a new instance of the class Rooms class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Creates a new room.
     * @param createRoomRequest The create room request body.
     * @param options The options parameters.
     */
    createRoom(createRoomRequest, options) {
        return this.client.sendOperationRequest({ createRoomRequest, options }, createRoomOperationSpec);
    }
    /**
     * Retrieves an existing room by id.
     * @param roomId The id of the room requested
     * @param options The options parameters.
     */
    getRoom(roomId, options) {
        return this.client.sendOperationRequest({ roomId, options }, getRoomOperationSpec);
    }
    /**
     * Update a room with given changes.
     * @param roomId The id of the room requested
     * @param options The options parameters.
     */
    updateRoom(roomId, options) {
        return this.client.sendOperationRequest({ roomId, options }, updateRoomOperationSpec);
    }
    /**
     * Delete a room.
     * @param roomId The id of the room to be deleted
     * @param options The options parameters.
     */
    deleteRoom(roomId, options) {
        return this.client.sendOperationRequest({ roomId, options }, deleteRoomOperationSpec);
    }
    /**
     * Get participants in a room.
     * @param roomId The id of the room to get participants from
     * @param options The options parameters.
     */
    getParticipants(roomId, options) {
        return this.client.sendOperationRequest({ roomId, options }, getParticipantsOperationSpec);
    }
    /**
     * Adds participants to a room. If participants already exist, no change occurs.
     * @param roomId Room id to add participants.
     * @param addParticipantsRequest Participants to be added to the room.
     * @param options The options parameters.
     */
    addParticipants(roomId, addParticipantsRequest, options) {
        return this.client.sendOperationRequest({ roomId, addParticipantsRequest, options }, addParticipantsOperationSpec);
    }
    /**
     * Update participants in a room.
     * @param roomId The room id.
     * @param updateParticipantsRequest Participants in a room to be updated.
     * @param options The options parameters.
     */
    updateParticipants(roomId, updateParticipantsRequest, options) {
        return this.client.sendOperationRequest({ roomId, updateParticipantsRequest, options }, updateParticipantsOperationSpec);
    }
    /**
     * Remove participants from a room.
     * @param roomId Room id to remove the participants from.
     * @param removeParticipantsRequest Participants in a room to be removed.
     * @param options The options parameters.
     */
    removeParticipants(roomId, removeParticipantsRequest, options) {
        return this.client.sendOperationRequest({ roomId, removeParticipantsRequest, options }, removeParticipantsOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient__namespace.createSerializer(Mappers, /* isXml */ false);
const createRoomOperationSpec = {
    path: "/rooms",
    httpMethod: "POST",
    responses: {
        201: {
            bodyMapper: RoomModel
        },
        default: {
            bodyMapper: CommunicationErrorResponse,
            headersMapper: RoomsCreateRoomExceptionHeaders
        }
    },
    requestBody: createRoomRequest,
    queryParameters: [apiVersion],
    urlParameters: [endpoint],
    headerParameters: [
        contentType,
        accept,
        repeatabilityRequestID,
        repeatabilityFirstSent
    ],
    mediaType: "json",
    serializer
};
const getRoomOperationSpec = {
    path: "/rooms/{roomId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: RoomModel
        },
        default: {
            bodyMapper: CommunicationErrorResponse,
            headersMapper: RoomsGetRoomExceptionHeaders
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [endpoint, roomId],
    headerParameters: [accept],
    serializer
};
const updateRoomOperationSpec = {
    path: "/rooms/{roomId}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: RoomModel
        },
        default: {
            bodyMapper: CommunicationErrorResponse,
            headersMapper: RoomsUpdateRoomExceptionHeaders
        }
    },
    requestBody: patchRoomRequest,
    queryParameters: [apiVersion],
    urlParameters: [endpoint, roomId],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer
};
const deleteRoomOperationSpec = {
    path: "/rooms/{roomId}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        default: {
            bodyMapper: CommunicationErrorResponse,
            headersMapper: RoomsDeleteRoomExceptionHeaders
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [endpoint, roomId],
    headerParameters: [accept],
    serializer
};
const getParticipantsOperationSpec = {
    path: "/rooms/{roomId}/participants",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: ParticipantsCollection
        },
        default: {
            bodyMapper: CommunicationErrorResponse,
            headersMapper: RoomsGetParticipantsExceptionHeaders
        }
    },
    queryParameters: [apiVersion],
    urlParameters: [endpoint, roomId],
    headerParameters: [accept],
    serializer
};
const addParticipantsOperationSpec = {
    path: "/rooms/{roomId}/participants:add",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ParticipantsCollection
        },
        default: {
            bodyMapper: CommunicationErrorResponse,
            headersMapper: RoomsAddParticipantsExceptionHeaders
        }
    },
    requestBody: addParticipantsRequest,
    queryParameters: [apiVersion],
    urlParameters: [endpoint, roomId],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer
};
const updateParticipantsOperationSpec = {
    path: "/rooms/{roomId}/participants:update",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ParticipantsCollection
        },
        default: {
            bodyMapper: CommunicationErrorResponse,
            headersMapper: RoomsUpdateParticipantsExceptionHeaders
        }
    },
    requestBody: updateParticipantsRequest,
    queryParameters: [apiVersion],
    urlParameters: [endpoint, roomId],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer
};
const removeParticipantsOperationSpec = {
    path: "/rooms/{roomId}/participants:remove",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: ParticipantsCollection
        },
        default: {
            bodyMapper: CommunicationErrorResponse,
            headersMapper: RoomsRemoveParticipantsExceptionHeaders
        }
    },
    requestBody: removeParticipantsRequest,
    queryParameters: [apiVersion],
    urlParameters: [endpoint, roomId],
    headerParameters: [contentType, accept],
    mediaType: "json",
    serializer
};

/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
class RoomsApiClient extends coreClient__namespace.ServiceClient {
    /**
     * Initializes a new instance of the RoomsApiClient class.
     * @param endpoint The endpoint of the Azure Communication resource.
     * @param options The parameter options
     */
    constructor(endpoint, options) {
        var _a, _b;
        if (endpoint === undefined) {
            throw new Error("'endpoint' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8"
        };
        const packageDetails = `azsdk-js-communication-rooms/1.2.0-beta.1`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix
            }, baseUri: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "{endpoint}" });
        super(optionsWithDefaults);
        // Parameter assignments
        this.endpoint = endpoint;
        // Assigning values to Constant parameters
        this.apiVersion = options.apiVersion || "2022-02-01";
        this.rooms = new RoomsImpl(this);
        this.addCustomApiVersionPolicy(options.apiVersion);
    }
    /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
    addCustomApiVersionPolicy(apiVersion) {
        if (!apiVersion) {
            return;
        }
        const apiVersionPolicy = {
            name: "CustomApiVersionPolicy",
            async sendRequest(request, next) {
                const param = request.url.split("?");
                if (param.length > 1) {
                    const newParams = param[1].split("&").map((item) => {
                        if (item.indexOf("api-version") > -1) {
                            return "api-version=" + apiVersion;
                        }
                        else {
                            return item;
                        }
                    });
                    request.url = param[0] + "?" + newParams.join("&");
                }
                return next(request);
            }
        };
        this.pipeline.addPolicy(apiVersionPolicy);
    }
}

// Copyright (c) Microsoft Corporation.
/**
 * @internal
 * Mapping room participant customer model to room participant REST model.
 */
const mapToRoomParticipantRestModel = (roomParticipant) => {
    const { id } = roomParticipant, rest = tslib.__rest(roomParticipant, ["id"]);
    if (communicationCommon.getIdentifierKind(id).kind !== "communicationUser") {
        throwException("We currently only support CommunicationUsers");
    }
    return Object.assign({ communicationIdentifier: communicationCommon.serializeCommunicationIdentifier(id) }, rest);
};
/**
 * Mapping CommunicationUserIdentifier to room participant REST model.
 */
const mapCommunicationIdentifierToRoomParticipantRestModel = (communicationIdentifier) => {
    return {
        communicationIdentifier: communicationCommon.serializeCommunicationIdentifier(communicationIdentifier),
    };
};
/**
 * @internal
 * Mapping room participant REST model to room participant SDK model.
 */
const mapToRoomParticipantSdkModel = (roomParticipant) => {
    const { communicationIdentifier } = roomParticipant, rest = tslib.__rest(roomParticipant, ["communicationIdentifier"]);
    return Object.assign({ id: communicationCommon.deserializeCommunicationIdentifier(communicationIdentifier) }, rest);
};
/**
 * @internal
 * Mapping room REST model to room SDK model.
 */
const mapToRoomSdkModel = (result) => {
    const { id, createdDateTime, participants, roomJoinPolicy } = result, rest = tslib.__rest(result, ["id", "createdDateTime", "participants", "roomJoinPolicy"]);
    return Object.assign({ id: id !== null && id !== void 0 ? id : throwException("Room ID cannot be null."), createdOn: createdDateTime, participants: participants === null || participants === void 0 ? void 0 : participants.map((participant) => mapToRoomParticipantSdkModel(participant)), joinPolicy: roomJoinPolicy }, rest);
};
function throwException(errorMessage) {
    throw new Error(errorMessage);
}

// Copyright (c) Microsoft Corporation.
/**
 * Generated Universally Unique Identifier
 *
 * @returns RFC4122 v4 UUID.
 * @internal
 */
function generateUuid() {
    return uuid.v4();
}

// Copyright (c) Microsoft Corporation.
/**
 * @internal
 * Checks whether the type of a value is RoomsClientOptions or not.
 * @param options - The value being checked.
 */
const isRoomsClientOptions = (options) => !!options && !communicationCommon.isKeyCredential(options);
/**
 * The Rooms service client.
 */
class RoomsClient {
    constructor(connectionStringOrUrl, credentialOrOptions, maybeOptions = {}) {
        const { url, credential } = communicationCommon.parseClientArguments(connectionStringOrUrl, credentialOrOptions);
        const options = isRoomsClientOptions(credentialOrOptions) ? credentialOrOptions : maybeOptions;
        const internalPipelineOptions = Object.assign(Object.assign({}, options), {
            loggingOptions: {
                logger: logger.info,
            },
        });
        this.client = new RoomsApiClient(url, Object.assign({ endpoint: url }, internalPipelineOptions));
        const authPolicy = communicationCommon.createCommunicationAuthPolicy(credential);
        this.client.pipeline.addPolicy(authPolicy);
    }
    /**
     * Creates a new room asynchronously.
     * @param request - Request for creating a room.
     * @param options - Operation options.
     * @returns a RoomModel object with the values of the created room.
     */
    async createRoom(options = {}) {
        const repeatabilityRequestId = generateUuid();
        const repeatabilityFirstSent = new Date();
        return tracingClient.withSpan("RoomsClient-CreateRoom", options, async (updatedOptions) => {
            var _a;
            const result = await this.client.rooms.createRoom(Object.assign(Object.assign({}, options), { participants: (_a = options.participants) === null || _a === void 0 ? void 0 : _a.map((participant) => mapToRoomParticipantRestModel(participant)) }), Object.assign(Object.assign({}, updatedOptions), { repeatabilityFirstSent: repeatabilityFirstSent, repeatabilityRequestID: repeatabilityRequestId }));
            return mapToRoomSdkModel(result);
        });
    }
    /**
     * Updates a room asynchronously.
     * @param roomId - ID of the room.
     * @param request - Request for updating a room.
     * @param options - Operational options.
     * @returns a RoomModel object with the values of the created room.
     */
    async updateRoom(roomId, options = {}) {
        return tracingClient.withSpan("RoomsClient-UpdateRoom", options, async (updatedOptions) => {
            var _a;
            const result = await this.client.rooms.updateRoom(roomId, Object.assign({ patchRoomRequest: Object.assign(Object.assign({}, options), { participants: (_a = options.participants) === null || _a === void 0 ? void 0 : _a.map((participant) => mapToRoomParticipantRestModel(participant)) }) }, updatedOptions));
            return mapToRoomSdkModel(result);
        });
    }
    /**
     * Gets a room by id asynchronously.
     * @param roomId - ID of the room.
     * @param options - Operational options.
     * @returns a RoomModel object with the values of the created room.
     */
    async getRoom(roomId, options = {}) {
        return tracingClient.withSpan("RoomsClient-GetRoom", options, async (updatedOptions) => {
            return mapToRoomSdkModel(await this.client.rooms.getRoom(roomId, updatedOptions));
        });
    }
    /**
     * Deletes a room by id asynchronously.
     * @param roomId - ID of the room.
     * @param options - Operational options.
     */
    async deleteRoom(roomId, options = {}) {
        return tracingClient.withSpan("RoomsClient-DeleteRoom", options, async (updatedOptions) => {
            await this.client.rooms.deleteRoom(roomId, updatedOptions);
        });
    }
    /**
     * Gets the participants of a room asynchronously.
     * @param roomId - ID of the room.
     * @param options - Operational options.
     * @returns a list of all the participants in the room.
     */
    async getParticipants(roomId, options = {}) {
        return tracingClient.withSpan("RoomsClient-GetParticipants", options, async (updatedOptions) => {
            const result = await this.client.rooms.getParticipants(roomId, updatedOptions);
            return result.participants.map((participant) => mapToRoomParticipantSdkModel(participant));
        });
    }
    /**
     * Adds Participants to a room asynchronously
     * @param roomId - ID of the room.
     * @param request - Request for adding participants to a room.
     * @param options - Operational options.
     * @returns a list of all the participants in the room.
     */
    async addParticipants(roomId, participants, options = {}) {
        return tracingClient.withSpan("RoomsClient-AddParticipants", options, async (updatedOptions) => {
            await this.client.rooms.addParticipants(roomId, {
                participants: participants.map((participant) => mapToRoomParticipantRestModel(participant)),
            }, updatedOptions);
        });
    }
    /**
     * Updates the Participants in a Room asynchronously.
     * @param roomId - ID of the room.
     * @param request - Request for updating participants in a room.
     * @param options - Operational options.
     * @returns a list of all the participants in the room.
     */
    async updateParticipants(roomId, participants, options = {}) {
        return tracingClient.withSpan("RoomsClient-UpdateParticipants", options, async (updatedOptions) => {
            await this.client.rooms.updateParticipants(roomId, {
                participants: participants.map((participant) => mapToRoomParticipantRestModel(participant)),
            }, updatedOptions);
        });
    }
    /**
     * Removes Participants from a Room asynchronously.
     * @param roomId - ID of the room.
     * @param request - Request for deleting participants in a room.
     * @param options - Operational options.
     * @returns a list of all the participants in the room.
     */
    async removeParticipants(roomId, participants, options = {}) {
        return tracingClient.withSpan("RoomsClient-RemoveParticipants", options, async (updatedOptions) => {
            await this.client.rooms.removeParticipants(roomId, {
                participants: participants.map((participant) => mapCommunicationIdentifierToRoomParticipantRestModel(participant)),
            }, updatedOptions);
        });
    }
}

exports.RoomsClient = RoomsClient;
//# sourceMappingURL=index.js.map
