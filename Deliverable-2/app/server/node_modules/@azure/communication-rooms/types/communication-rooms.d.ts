import { CommonClientOptions } from '@azure/core-client';
import { CommunicationIdentifier } from '@azure/communication-common';
import { CommunicationUserIdentifier } from '@azure/communication-common';
import { KeyCredential } from '@azure/core-auth';
import { OperationOptions } from '@azure/core-client';
import { TokenCredential } from '@azure/core-auth';

/**
 * Options to add participants to a room.
 */
export declare type AddParticipantsOptions = OperationOptions;

/**
 * Options to create a room.
 */
export declare interface CreateRoomOptions extends OperationOptions {
    /** The timestamp from when the room is open for joining. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    validFrom?: Date;
    /** The timestamp from when the room can no longer be joined. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    validUntil?: Date;
    /** The room join policy for the room. */
    roomJoinPolicy?: RoomJoinPolicy;
    /** Collection of participants invited to the room. */
    participants?: RoomParticipant[];
}

/**
 * Options to delete a room.
 */
export declare type DeleteRoomOptions = OperationOptions;

/**
 * Options to get the participants of a room.
 */
export declare type GetParticipantsOptions = OperationOptions;

/**
 * Options to get a room.
 */
export declare type GetRoomOptions = OperationOptions;

/**
 * Options to remove participants from a room.
 */
export declare type RemoveParticipantsOptions = OperationOptions;

/** Defines values for RoleType. */
export declare type Role = "Presenter" | "Attendee" | "Consumer";

/** The meeting room. */
export declare interface Room {
    /** Unique identifier of a room. This id is server generated. */
    id: string;
    /** The timestamp when the room was created at the server. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    createdOn: Date;
    /** The timestamp from when the room is open for joining. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    validFrom: Date;
    /** The timestamp from when the room can no longer be joined. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    validUntil: Date;
    /** The room join policy for the room. */
    joinPolicy: RoomJoinPolicy;
    /** Collection of identities invited to the room. */
    participants: RoomParticipant[];
}

/** Defines values for RoomJoinPolicy. */
export declare type RoomJoinPolicy = "InviteOnly" | "CommunicationServiceUsers";

/** A participant of the room. */
export declare interface RoomParticipant {
    /** Identifies a participant in Azure Communication services. A participant is, for example, a phone number or an Azure communication user. This model must be interpreted as a union: Apart from rawId, at most one further property may be set.  */
    id: CommunicationIdentifier;
    /** Role name. */
    role?: Role;
}

/**
 * The Rooms service client.
 */
export declare class RoomsClient {
    private readonly client;
    /**
     * Initializes a new instance of the RoomsClient class.
     * @param connectionString - Connection string to connect to an Azure Communication Service resource.
     * @param options - Optional. Options to configure the HTTP pipeline.
     */
    constructor(connectionString: string, options?: RoomsClientOptions);
    /**
     * Initializes a new instance of the RoomsClient using an Azure KeyCredential
     * @param endpoint - The url of the Communication Services resource
     * @param credential - An object that is used to authenticate requests to the service. Use the Azure KeyCredential or `@azure/identity` to create a credential.
     * @param options - Optional. Options to configure the HTTP pipeline.
     */
    constructor(endpoint: string, credential: KeyCredential, options?: RoomsClientOptions);
    /**
     * Initializes a new instance of the RoomsClient using a TokenCredential
     * @param endpoint - The url of the Communication Services resource
     * @param credential - An object that is used to authenticate requests to the service. Use the AzureCommunicationTokenCredential from `@azure/communication-common` to create a credential.
     * @param options - Optional. Options to configure the HTTP pipeline.
     */
    constructor(endpoint: string, credential: TokenCredential, options?: RoomsClientOptions);
    /**
     * Creates a new room asynchronously.
     * @param request - Request for creating a room.
     * @param options - Operation options.
     * @returns a RoomModel object with the values of the created room.
     */
    createRoom(options?: CreateRoomOptions): Promise<Room>;
    /**
     * Updates a room asynchronously.
     * @param roomId - ID of the room.
     * @param request - Request for updating a room.
     * @param options - Operational options.
     * @returns a RoomModel object with the values of the created room.
     */
    updateRoom(roomId: string, options?: UpdateRoomOptions): Promise<Room>;
    /**
     * Gets a room by id asynchronously.
     * @param roomId - ID of the room.
     * @param options - Operational options.
     * @returns a RoomModel object with the values of the created room.
     */
    getRoom(roomId: string, options?: GetRoomOptions): Promise<Room>;
    /**
     * Deletes a room by id asynchronously.
     * @param roomId - ID of the room.
     * @param options - Operational options.
     */
    deleteRoom(roomId: string, options?: DeleteRoomOptions): Promise<void>;
    /**
     * Gets the participants of a room asynchronously.
     * @param roomId - ID of the room.
     * @param options - Operational options.
     * @returns a list of all the participants in the room.
     */
    getParticipants(roomId: string, options?: GetParticipantsOptions): Promise<RoomParticipant[]>;
    /**
     * Adds Participants to a room asynchronously
     * @param roomId - ID of the room.
     * @param request - Request for adding participants to a room.
     * @param options - Operational options.
     * @returns a list of all the participants in the room.
     */
    addParticipants(roomId: string, participants: RoomParticipant[], options?: AddParticipantsOptions): Promise<void>;
    /**
     * Updates the Participants in a Room asynchronously.
     * @param roomId - ID of the room.
     * @param request - Request for updating participants in a room.
     * @param options - Operational options.
     * @returns a list of all the participants in the room.
     */
    updateParticipants(roomId: string, participants: RoomParticipant[], options?: UpdateParticipantsOptions): Promise<void>;
    /**
     * Removes Participants from a Room asynchronously.
     * @param roomId - ID of the room.
     * @param request - Request for deleting participants in a room.
     * @param options - Operational options.
     * @returns a list of all the participants in the room.
     */
    removeParticipants(roomId: string, participants: CommunicationUserIdentifier[], options?: RemoveParticipantsOptions): Promise<void>;
}

/**
 * Options to create rooms client.
 */
export declare interface RoomsClientOptions extends CommonClientOptions {
}

/**
 * Options to update the participants of a room.
 */
export declare type UpdateParticipantsOptions = OperationOptions;

/**
 * Options to update a room.
 */
export declare interface UpdateRoomOptions extends OperationOptions {
    /** The timestamp from when the room is open for joining. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    validFrom?: Date;
    /** The timestamp from when the room can no longer be joined. The timestamp is in RFC3339 format: `yyyy-MM-ddTHH:mm:ssZ`. */
    validUntil?: Date;
    /** The room join policy for the room. */
    roomJoinPolicy?: RoomJoinPolicy;
    /** Collection of participants invited to the room. */
    participants?: RoomParticipant[];
}

export { }
